<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="dashboard.css">
  <style>
    .gender-column, .syllabus-column {
    text-transform: capitalize;
  }
  
  .bulk-actions {
      margin: 20px 0;
      text-align: right;
    }

    .bulk-actions button {
      margin-left: 10px;
    }

    .btn-status:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    /* Add checkbox styling */
    .select-checkbox {
      width: 18px;
      height: 18px;
      cursor: pointer;
    }

    /* Center align checkbox column */
    .table th:first-child,
    .table td:first-child {
      width: 40px;
      text-align: center;
      vertical-align: middle;
    }

  .search-bar-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }
  
      .search-bar-container input {
        width: 300px;
        padding: 5px 15px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #ccc;
      }
  
      body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f6f9;
        padding-top: 70px;
      }
  
      .dashboard-container {
        padding: 38px;
        margin: 20px auto;
        background-color: #ffffff;
        border-radius: 28px;
        box-shadow: 1px 14px 16px rgba(5, 5, 5, 0.1);
        width: 190%;
        max-width: 1580px;
      }
  
      h1, h2 {
        color: #4e73df;
        text-align: center;
      }
  
      .navbar {
        background: linear-gradient(45deg, rgba(0, 123, 255, 0.9), rgba(0, 76, 153, 0.9));
        padding: 9px 20px;
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(10px);
      }

      .nav-link {
    display: flex;
    align-items: center;
    color: #0c0e10; /* Bootstrap primary color */
    font-weight: bold;
    text-decoration: none;
    padding: 8px 12px;
    transition: color 0.2s ease-in-out;
}

.nav-link i {
    margin-right: 8px;
    font-size: 18px;
}

.nav-link:hover {
    color: #cfdae5; /* Darker shade for hover effect */
   
}

  
      .navbar-brand {
        font-size: 24px;
        font-weight: bold;
        color: #ffffff;
      }
  
      .navbar-brand:hover {
        color: #d1d3e2;
      }
  
      .btn-logout {
        color: #ffffff;
        cursor: pointer;
      }
  
      .btn-logout:hover {
        background-color: #ffffff;
        color: #4e73df;
      }
  
      .table-responsive {
        max-height: 500px;
        overflow-y: auto;
        margin-top: 20px;
        max-width: 1900px;
     
      }
  
      .table th, .table td {
        vertical-align: middle;
        text-align: center;
      }
  
      .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }
  
      /* Styles for Pagination Buttons */
      .pagination-container button {
        padding: 10px 20px;
        font-size: 14px;
        font-weight: bold;
        border: none;
        border-radius: 5px;
        color: white;
        background-color: #4e73df;
        transition: background-color 0.3s ease, transform 0.2s ease;
      }
  
      .pagination-container button:hover {
        background-color: #2e59d9;
        transform: translateY(-2px);
      }
  
      .pagination-container button:disabled {
        background-color: #d1d3e2;
        color: #6c757d;
        cursor: not-allowed;
      }
  
      /* Styles for Accept and Deny Buttons */
      .btn-status {
        font-size: 12px;
        padding: 5px 10px;
        margin: 2px;
        border-radius: 5px;
        display: inline-block;
      }
  
      .btn-status:hover {
        opacity: 0.85;
      }
  
      /* Style for the chart */
      .chart-widget {
        margin-top: 50px;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 50%; /* Smaller size for chart */
        margin: 0 auto;
      }
  
      .chart-filters {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-bottom: 20px;
      }
  
      canvas {
        width: 100% !important;
        height: auto !important;
      }
  
      /* Media Queries for responsiveness */
      @media (max-width: 1200px) {
        .chart-widget {
          width: 60%;
        }
      }
  
      @media (max-width: 992px) {
        .chart-widget {
          width: 70%;
        }
      }
  
      @media (max-width: 768px) {
  #approvedListBtn {
    width: 100%;
    padding: 12px;
    font-size: 14px;
  }

  /* Search bar and button adjustments */
  .search-bar-container {
    flex-direction: column;
    align-items: stretch;
  }

  .search-bar-container input {
    width: 100%;
    margin-bottom: 10px;
  }

  /* Table styles for smaller screens */
  .table th,
  .table td {
    font-size: 12px;
    padding: 6px;
  }

  .table-responsive {
    max-height: none;
    overflow-x: auto;
  }

  .table {
    width: 100%;
  }

  /* Navbar adjustments */
  .navbar-brand {
    font-size: 18px;
  }

  .btn-logout {
    font-size: 14px;
    padding: 5px 10px;
  }
}

@media (max-width: 576px) {
  #approvedListBtn {
    padding: 10px;
    font-size: 12px;
  }

  .search-bar-container input {
    font-size: 12px;
  }

  .table th,
  .table td {
    font-size: 10px;
    padding: 4px;
  }
}

   /* Approved List Button Styles */
#approvedListBtn {
  display: block;
  margin: 10px auto;
  padding: 10px 20px;
  font-size: 16px;
  font-weight: bold;
  background-color: #4e73df;
  color: #e5ede7;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease, transform 0.2s ease;
  text-align: center;
}

#approvedListBtn:hover {
  background-color: #2e59d9;
  transform: translateY(-2px);
}
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="/"><i class="fas fa-school"></i></a>
      <a class="nav-link" href="/fee-structure"><i class="fas fa-file-invoice-dollar"></i>  FEE</a> 
      <div class="ml-auto">
        <button id="logoutButton" class="btn btn-danger" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>

      </div>
    </div>
  </nav>

  <div class="dashboard-container">
    <h1>Welcome to Admin Dashboard</h1>

    <!-- Search Bar Section -->
    <div class="search-bar-container">
        <h2>Submitted Entries</h2>

        <!-- Approved List Button -->
<div class="text-center">
  <!-- Approved List Button -->
<button id="approvedListBtn" onclick="redirectToApprovedList()">Approved List</button>

</div>

        <input type="text" id="searchInput" class="form-control" placeholder="Search by Name or ID" onkeyup="searchEntries()" />
      </div>

   <!-- Table Section -->
    <div class="table-responsive">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th>
              <input type="checkbox" id="selectAll" onclick="toggleSelectAll()" />
            </th>
            <th>Sl.No</th>
            <th>ID</th> <!-- New Column for ID -->
            <th>Name</th>
            <th>Email</th>
            <th>Contact</th>
            <th>Class</th>
            <th>Father's Name</th>
            <th>Father's Occupation</th>
            <th>Mother's Name</th>
            <th>Mother's Occupation</th>
            <th>Gender</th>
            <th>Syllabus</th>
            <th>Message</th>
            <th>Dated</th> <!-- New Column for Dated -->
            <th>Status</th>
          </tr>
        </thead>
        <tbody id="entriesTableBody">
          <% if (entries && entries.length > 0) { %>
            <% entries.forEach((entry, index) => { if (index < 4) { %> 
              <tr class="entry-row">
                <td>
                  <input type="checkbox" class="entry-checkbox select-checkbox" 
                         data-entry-id="<%= entry.id %>" 
                         onchange="updateBulkButtons()" 
                         <%= entry.status ? 'disabled' : '' %> />
              </td>
                <td><%= entry.id %></td> <!-- Display ID -->
                <td><%= entry.name %></td>
                <td><%= entry.email %></td>
                <td><%= entry.contact %></td>
                <td><%= entry.class %></td>
                <td><%= entry.father_name %></td>
                <td><%= entry.father_occupation %></td>
                <td><%= entry.mother_name %></td>
                <td><%= entry.mother_occupation %></td>
                <!-- <td><%= entry.sex %></td> -->
                <td class="gender-column"><%= entry.sex %></td>
                <!-- <td><%= entry.syllabus %></td> -->
                <td class="syllabus-column"><%= entry.syllabus %></td>

                <td><%= entry.message %></td>
                <td><%= entry.dated %></td> <!-- Display Dated -->
                <td>
                  <% if (entry.status === 'accepted') { %>
                    <span class="badge badge-success">Accepted</span>
                  <% } else if (entry.status === 'denied') { %>
                    <span class="badge badge-danger">Denied</span>
                  <% } else { %>
                    <button id="bulkAcceptBtn" class="btn btn-success" onclick="bulkUpdateStatus('accepted')" disabled> Accept</button>
                    <button id="bulkDenyBtn" class="btn btn-danger" onclick="bulkUpdateStatus('denied')" disabled> Deny</button>
                    
                  <% } %>
                </td>
                
              </tr>
            <% } }) %>
          <% } else { %>
            <tr>
              <td colspan="13" class="text-center">No entries available.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination-container">
      <button class="btn" id="prevPageBtn" onclick="changePage(-1)">Previous</button>
      <button class="btn" id="nextPageBtn" onclick="changePage(1)">Next</button>
    </div>

    <!-- Chart Section -->
    <div class="chart-widget">
      <h2>Enquiry Breakdown</h2>
      <div class="chart-filters">
        <select id="syllabusFilter" class="form-control" style="width: 200px;">
          <option value="">All Syllabus</option>
          <% uniqueSyllabi.forEach(syllabus => { %>
            <option value="<%= syllabus %>"><%= syllabus %></option>
          <% }); %>
        </select>
        
        <select id="classFilter" class="form-control" style="width: 200px;">
          <option value="">All Classes</option>
          <% uniqueClasses.forEach(classItem => { %>
            <option value="<%= classItem.trim() %>"><%= classItem %></option>
          <% }); %>
        </select>
        
        
      </div>
      <canvas id="pieChart" width="300" height="150"></canvas>
    </div>
  </div>

  <!-- Script for Pie Chart -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    let currentPage = 1;
    const entriesPerPage = 4;

    let filteredEntries = <%- JSON.stringify(entries) %>;

    const syllabusFilter = document.getElementById('syllabusFilter');
    const classFilter = document.getElementById('classFilter');
    const pieChartCanvas = document.getElementById('pieChart').getContext('2d');
    let pieChart;

    function updatePieChart() {
      const filteredData = filteredEntries.reduce((acc, entry) => {
        acc[entry.class] = (acc[entry.class] || 0) + 1;
        return acc;
      }, {});

      const labels = Object.keys(filteredData);
      const data = Object.values(filteredData);

      if (pieChart) pieChart.destroy();

      pieChart = new Chart(pieChartCanvas, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            label: 'Enrollment Distribution',
            data: data,
            backgroundColor: [
  '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', 
  '#858796', '#f8d7da', '#d39e00', '#f2d1a1', '#e3a1d3'
],

          }]
        }
      });
    }


    
function updateStatus(){
  window.alert("Are you sure ?    ")
}
    function filterEntries() {
  const syllabusValue = syllabusFilter.value.trim();
  const classValue = classFilter.value.trim();

  filteredEntries = <%- JSON.stringify(entries) %>.filter(entry => {
    const entrySyllabus = (entry.syllabus || '').toUpperCase();
    const entryClass = entry.class ? entry.class.trim() : '';

    return (!syllabusValue || entrySyllabus === syllabusValue.toUpperCase()) &&
           (!classValue || entryClass === classValue);
  });

  updatePieChart();
  paginateEntries();
}

function updateBulkButtons() {
            const checkboxes = document.getElementsByClassName('entry-checkbox');
            const checkedBoxes = Array.from(checkboxes).filter(checkbox => 
                checkbox.checked && !checkbox.disabled
            );
            
            const bulkAcceptBtn = document.getElementById('bulkAcceptBtn');
            const bulkDenyBtn = document.getElementById('bulkDenyBtn');
            
            const hasCheckedBoxes = checkedBoxes.length > 0;
            bulkAcceptBtn.disabled = !hasCheckedBoxes;
            bulkDenyBtn.disabled = !hasCheckedBoxes;
        }

    // Modified toggleSelectAll function
    function toggleSelectAll() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const entryCheckboxes = document.getElementsByClassName('entry-checkbox');
            
            Array.from(entryCheckboxes).forEach(checkbox => {
                if (!checkbox.disabled) {
                    checkbox.checked = selectAllCheckbox.checked;
                }
            });
            
            updateBulkButtons();
        }

    // Function to handle bulk status updates
    
        function bulkUpdateStatus(status) {
            const checkboxes = document.getElementsByClassName('entry-checkbox');
            const selectedIds = Array.from(checkboxes)
                .filter(checkbox => checkbox.checked && !checkbox.disabled)
                .map(checkbox => checkbox.getAttribute('data-entry-id'));
            
            if (selectedIds.length === 0) return;

            const confirmMessage = `Are you sure you want to ${status} ${selectedIds.length} selected entries?`;
            if (!confirm(confirmMessage)) return;

            Promise.all(selectedIds.map(id => 
                fetch(`/update-status/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: status })
                })
            ))
            .then(responses => Promise.all(responses.map(r => r.json())))
            .then(results => {
                const allSuccessful = results.every(result => result.success);
                if (allSuccessful) {
                    alert("Selected entries have been updated successfully!");
                    location.reload();
                } else {
                    alert("Some entries could not be updated. Please try again.");
                }
            })
            .catch(error => {
                console.error('Error updating entries:', error);
                alert('An error occurred while updating the entries.');
            });
        }

        function updateStatus(id, status) {
            const confirmMessage = `Are you sure you want to ${status} this entry?`;
            if (!confirm(confirmMessage)) return;

            fetch(`/update-status/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Status updated successfully!");
                    location.reload();
                } else {
                    alert("Failed to update status.");
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the status.');
            });
        }
 


        function paginateEntries() {
            const start = (currentPage - 1) * entriesPerPage;
            const end = start + entriesPerPage;
            const paginatedEntries = filteredEntries.slice(start, end);

            const tableBody = document.getElementById('entriesTableBody');
            tableBody.innerHTML = '';

            paginatedEntries.forEach((entry, index) => {
                const row = document.createElement('tr');
                row.classList.add('entry-row');
                
                const isDisabled = entry.status === 'accepted' || entry.status === 'denied';
                
                row.innerHTML = `
                    <td>
                        <input type="checkbox" class="entry-checkbox select-checkbox" 
                               data-entry-id="${entry.id}" 
                               onchange="updateBulkButtons()"
                               ${isDisabled ? 'disabled' : ''} />
                    </td>
                    <td>${start + index + 1}</td>
                    <td>${entry.id}</td>
                    <td>${entry.name}</td>
                    <td>${entry.email}</td>
                    <td>${entry.contact}</td>
                    <td>${entry.class}</td>
                    <td>${entry.father_name}</td>
                    <td>${entry.father_occupation}</td>
                    <td>${entry.mother_name}</td>
                    <td>${entry.mother_occupation}</td>
                    <td class="gender-column">${entry.sex}</td>
                    <td class="syllabus-column">${entry.syllabus}</td>
                    <td>${entry.message}</td>
                    <td>${entry.dated}</td>
                    <td>
                        ${entry.status === 'accepted' ? 
                            '<span class="badge badge-success">Accepted</span>' : 
                            (entry.status === 'denied' ? 
                            '<span class="badge badge-danger">Denied</span>' : 
                            '<div><button class="btn btn-success btn-status" onclick="updateStatus(\'' + entry.id + '\', \'accepted\')">Accept</button><button class="btn btn-danger btn-status" onclick="updateStatus(\'' + entry.id + '\', \'denied\')">Deny</button></div>')}
                    </td>
                `;
                tableBody.appendChild(row);
            });

            document.getElementById('prevPageBtn').disabled = currentPage === 1;
            document.getElementById('nextPageBtn').disabled = currentPage * entriesPerPage >= filteredEntries.length;
            
            // Reset select all checkbox and bulk buttons when page changes
            document.getElementById('selectAll').checked = false;
            updateBulkButtons();
        }


    document.addEventListener('change', function(e) {
      if (e.target.classList.contains('entry-checkbox')) {
        const selectAllCheckbox = document.getElementById('selectAll');
        const entryCheckboxes = document.getElementsByClassName('entry-checkbox');
        const allChecked = Array.from(entryCheckboxes).every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allChecked;
      }
    });


    function changePage(direction) {
      currentPage += direction;
      paginateEntries();
    }

      // Search Entries by Name or ID
      function searchEntries() {
      const searchValue = document.getElementById('searchInput').value.toLowerCase();
      filteredEntries = <%- JSON.stringify(entries) %>.filter(entry => {
        return entry.name.toLowerCase().includes(searchValue) || 
               entry.id.toString().includes(searchValue);
      });

      paginateEntries();
    }

    syllabusFilter.addEventListener('change', filterEntries);
    classFilter.addEventListener('change', filterEntries);

    document.addEventListener('DOMContentLoaded', () => {
      paginateEntries();
      updatePieChart();
    });


    function logout() {
  const confirmLogout = window.confirm("Are you sure you want to log out?");
  if (confirmLogout) {
    window.location.href = '/admin/logout';
  }
}

  </script>

<script>
  function redirectToApprovedList() {
    console.log('Redirecting to approved list...');
    window.location.href = '/approved-list';  // Redirects to the approved entries page
  }
</script>



</body>
</html>
